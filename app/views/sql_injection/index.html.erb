<div class="row" id="vertically_centered_row">
  <div class="col-xs-12 title">
    <h1>Welcome <%= current_user.name %></h1>
    <h2>SQL Injection Reference Page</h2>
  </div>
  <div class="col-xs-12">
    <hr/>
        <p class="lead">
          SQL Injection can be avoided by making sure you are careful with including
          user input or user controlled values in your queries, especially when you
          aren't using the methods in ActiveRecord by passing in parameters as hashes
          or arrays. It is important to be aware of how the data you are using in your
          queries is set, and being explicit in how they are used.
        </p>
        <p class="lead">
          If you have to use string interpolation for a user provided string in your
          custom query, use ActiveRecord::Base::sanitize(input). BE CAREFUL,
          you can still get unauthorized reads using this method. It isn't the
          end all be all protection from sql injection. It is up to you to check
          the structure of your queries after they are generated by ActiveRecord
          (See <%= link_to "line 10", sql_injection_sqli_path(anchor:"n10") %> for the where method
           for an example)
        </p>
        <p class="lead">
          Some information provided by other websites regarding sql injection is
          not relevant to rails. Specifically you can't insert ';' into Active
          Record method calls and have multiple queries executed in that single
          method call (AKA query stacking).
          However, you can still use comment delimiters like '#'
          and '-- ' for mysql to comment out the rest of the query. Make sure you
          parameterize your input to every Active Record method. 
          See the countermeasures code on the practice pages.
        </p>
  </div>
  <div class="col-xs-offset-3 col-xs-6 col-md-offset-4 col-md-4">
    <div class="well">
      <%= button_tag "Start Practicing", class: "btn btn-lg btn-block btn-primary",
        onclick: "window.location.href='#{sql_injection_sqli_path}'" %>
    </div>
  </div>
</div>
